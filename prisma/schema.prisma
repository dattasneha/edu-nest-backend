generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id              String            @id @default(uuid())
    email           String            @unique
    name            String
    profileImageUrl String?
    password        String
    refreshToken    String?
    otp             String?
    groups          Group[]
    group_members   GroupMembers[]
    expenses        Expenses[]
    expenseApproval ExpenseApproval[]
    expenseSplit    ExpenseSplit[]
    usergets        UserBalance[]     @relation("gets")
    userOwes        UserBalance[]     @relation("owes")
    paymentFrom     Payment[]         @relation("from")
    paymentTo       Payment[]         @relation("to")
    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
}

model Group {
    id            String         @id @default(uuid())
    name          String
    createdBy     User           @relation(fields: [created_by], references: [id])
    created_by    String
    group_members GroupMembers[]
    expenses      Expenses[]
    createdAt     DateTime       @default(now())
    Payment       Payment[]
}

model GroupMembers {
    group     Group    @relation(fields: [groupId], references: [id])
    groupId   String
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    status    String
    joined_at DateTime @default(now())

    @@id([groupId, userId])
}

model Expenses {
    id              String            @id @default(uuid())
    group           Group             @relation(fields: [groupId], references: [id])
    groupId         String
    title           String
    amount          Float
    createdBy       User              @relation(fields: [created_by], references: [id])
    created_by      String
    status          String
    expenseApproval ExpenseApproval[]
    expenseSplit    ExpenseSplit[]
    userBalance     UserBalance[]
    created_at      DateTime          @default(now())
}

model ExpenseApproval {
    expense   Expenses @relation(fields: [expenseId], references: [id])
    expenseId String
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    status    String

    @@id([expenseId, userId])
}

model ExpenseSplit {
    expense     Expenses @relation(fields: [expenseId], references: [id])
    expenseId   String
    user        User     @relation(fields: [userId], references: [id])
    userId      String
    amout_share Float

    @@id([expenseId, userId])
}

model UserBalance {
    expense      Expenses @relation(fields: [expenseId], references: [id])
    expenseId    String
    userGets     User     @relation("gets", fields: [user_gets_id], references: [id])
    user_gets_id String
    userOwes     User     @relation("owes", fields: [user_owes_id], references: [id])
    user_owes_id String
    amout_share  Float

    @@id([expenseId, user_gets_id, user_owes_id])
}

model Payment {
    id             String   @id @default(uuid())
    fromUser       User     @relation("from", fields: [from_user_id], references: [id])
    from_user_id   String
    toUser         User     @relation("to", fields: [to_user_id], references: [id])
    to_user_id     String
    group          Group    @relation(fields: [groupId], references: [id])
    groupId        String
    amout_transfer Float
    status         String
    txn_id         String
    created_at     DateTime @default(now())
}
